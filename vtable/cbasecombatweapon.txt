// Auto reconstructed from vtable block @ 0x009CE3F0
// from "client.dylib", by ida_vtables.idc
0	C_BaseCombatWeapon::~C_BaseCombatWeapon()
1	C_BaseEntity::SetRefEHandle(CBaseHandle const&)
2	C_BaseEntity::GetRefEHandle(void)const
3	C_BaseEntity::GetCollideable(void)
4	C_BaseEntity::GetClientNetworkable(void)
5	C_BaseEntity::GetClientRenderable(void)
6	C_BaseEntity::GetIClientEntity(void)
7	C_BaseEntity::GetBaseEntity(void)
8	C_BaseEntity::GetClientThinkable(void)
9	C_BaseAnimating::Release(void)
10	C_BaseEntity::GetAbsOrigin(void)const
11	C_BaseEntity::GetAbsAngles(void)const
12	C_BaseAnimating::GetMouth(void)
13	C_BaseAnimating::GetSoundSpatialization(SpatializationInfo_t &)
14	C_BaseEntity::GetDataDescMap(void)
15	C_BaseCombatWeapon::YouForgotToImplementOrDeclareClientClass(void)
16	C_BaseCombatWeapon::GetClientClass(void)
17	C_BaseCombatWeapon::GetPredDescMap(void)
18	C_BaseCombatWeapon::FireBullets(FireBulletsInfo_t const&)
19	C_BaseEntity::ModifyFireBulletsDamage(CTakeDamageInfo *)
20	C_BaseEntity::ShouldDrawUnderwaterBulletBubbles(void)
21	C_BaseEntity::ShouldDrawWaterImpacts(void)
22	C_BaseEntity::HandleShotImpactingWater(FireBulletsInfo_t const&,Vector const&,ITraceFilter *,Vector*)
23	C_BaseEntity::GetBeamTraceFilter(void)
24	C_BaseEntity::DispatchTraceAttack(CTakeDamageInfo const&,Vector const&,CGameTrace *,CDmgAccumulator *)
25	C_BaseEntity::TraceAttack(CTakeDamageInfo const&,Vector const&,CGameTrace *,CDmgAccumulator *)
26	C_BaseEntity::DoImpactEffect(CGameTrace &,int)
27	C_BaseCombatWeapon::MakeTracer(Vector const&,CGameTrace const&,int)
28	C_BaseEntity::GetTracerAttachment(void)
29	C_BaseEntity::BloodColor(void)
30	C_BaseEntity::GetTracerType(void)
31	C_BaseCombatWeapon::Spawn(void)
32	C_BaseEntity::SpawnClientEntity(void)
33	C_BaseCombatWeapon::Precache(void)
34	C_BaseCombatWeapon::Activate(void)
35	C_BaseEntity::ParseMapData(CEntityMapData *)
36	C_BaseEntity::KeyValue(char const*,char const*)
37	C_BaseEntity::KeyValue(char const*,float)
38	C_BaseEntity::KeyValue(char const*,Vector const&)
39	C_BaseEntity::GetKeyValue(char const*,char *,int)
40	C_BaseEntity::Init(int,int)
41	C_BaseEntity::GetIClientUnknown(void)
42	C_BaseAnimating::GetBaseAnimating(void)
43	C_BaseEntity::SetClassname(char const*)
44	C_BaseEntity::RecordToolMessage(void)
45	C_BaseAnimating::GetRenderOrigin(void)
46	C_BaseAnimating::GetRenderAngles(void)
47	C_BaseEntity::GetObserverCamOrigin(void)
48	C_BaseEntity::RenderableToWorldTransform(void)
49	C_BaseEntity::IsTransparent(void)
50	C_BaseEntity::IsTwoPass(void)
51	C_BaseAnimating::UsesPowerOfTwoFrameBufferTexture(void)
52	C_BaseEntity::UsesFullFrameBufferTexture(void)
53	C_BaseEntity::IgnoresZBuffer(void)const
54	C_BaseEntity::GetModel(void)const
55	C_BaseCombatWeapon::DrawModel(int)
56	C_BaseEntity::ComputeFxBlend(void)
57	C_BaseEntity::GetFxBlend(void)
58	C_BaseEntity::LODTest(void)
59	C_BaseAnimating::GetRenderBounds(Vector &,Vector &)
60	C_BaseEntity::GetPVSNotifyInterface(void)
61	C_BaseEntity::GetRenderBoundsWorldspace(Vector &,Vector &)
62	C_BaseEntity::GetShadowRenderBounds(Vector &,Vector &,ShadowType_t)
63	C_BaseEntity::GetColorModulation(float *)
64	C_BaseEntity::OnThreadedDrawSetup(void)
65	C_BaseAnimating::TestCollision(Ray_t const&,unsigned int,CGameTrace &)
66	C_BaseAnimating::TestHitboxes(Ray_t const&,unsigned int,CGameTrace &)
67	C_BaseEntity::GetAttackDamageScale(void)
68	C_BaseCombatWeapon::NotifyShouldTransmit(ShouldTransmitState_t)
69	C_BaseAnimating::PreDataUpdate(DataUpdateType_t)
70	C_BaseAnimating::PostDataUpdate(DataUpdateType_t)
71	C_BaseEntity::OnDataUnchangedInPVS(void)
72	C_BaseAnimating::ValidateModelIndex(void)
73	C_BaseCombatWeapon::SetDormant(bool)
74	C_BaseEntity::IsDormant(void)
75	C_BaseEntity::SetDestroyedOnRecreateEntities(void)
76	C_BaseEntity::GetEFlags(void)const
77	C_BaseEntity::SetEFlags(int)
78	C_BaseEntity::entindex(void)const
79	C_BaseEntity::ReceiveMessage(int,bf_read &)
80	C_BaseEntity::GetDataTableBasePtr(void)
81	C_BaseEntity::ClientThink(void)
82	C_BaseEntity::GetThinkHandle(void)
83	C_BaseEntity::SetThinkHandle(CClientThinkHandlePtr *)
84	C_BaseEntity::ShouldSavePhysics(void)
85	C_BaseEntity::OnSave(void)
86	C_BaseCombatWeapon::OnRestore(void)
87	C_BaseEntity::ObjectCaps(void)
88	C_BaseEntity::Save(ISave &)
89	C_BaseEntity::Restore(IRestore &)
90	C_BaseEntity::CreateVPhysics(void)
91	C_BaseEntity::VPhysicsDestroyObject(void)
92	C_BaseEntity::GMOD_VPhysicsTest(IPhysicsObject *)
93	C_BaseEntity::GMOD_GetPhysBoneMatrix(int)
94	C_BaseAnimating::VPhysicsUpdate(IPhysicsObject *)
95	C_BaseAnimating::VPhysicsGetObjectList(IPhysicsObject **,int)
96	C_BaseEntity::VPhysicsIsFlesh(void)
97	C_BaseAnimating::SetupBones(matrix3x4_t *,int,int,float)
98	C_BaseEntity::SetupWeights(matrix3x4_t const*,int,float *,float *)
99	C_BaseEntity::UsesFlexDelayedWeights(void)
100	C_BaseEntity::DoAnimationEvents(void)
101	C_BaseAnimating::AddEntity(void)
102	C_BaseEntity::GetLocalAngles(void)const
103	C_BaseEntity::GetPrevLocalOrigin(void)const
104	C_BaseEntity::GetPrevLocalAngles(void)const
105	C_BaseCombatWeapon::CalcOverrideModelIndex(void)
106	C_BaseEntity::WorldAlignMins(void)const
107	C_BaseEntity::WorldAlignMaxs(void)const
108	C_BaseEntity::WorldSpaceCenter(void)const
109	C_BaseEntity::ComputeWorldSpaceSurroundingBox(Vector *,Vector *)
110	C_BaseEntity::GetSolid(void)const
111	C_BaseEntity::GetSolidFlags(void)const
112	C_BaseAnimating::LookupAttachment(char const*)
113	C_BaseAnimating::GetAttachment(int,matrix3x4_t &)
114	C_BaseAnimating::GetAttachment(int,Vector &)
115	C_BaseAnimating::GetAttachment(int,Vector &,QAngle &)
116	C_BaseAnimating::GetAttachmentVelocity(int,Vector &,Quaternion &)
117	C_BaseEntity::GetTeam(void)
118	C_BaseEntity::GetTeamNumber(void)const
119	C_BaseEntity::ChangeTeam(int)
120	C_BaseEntity::GetRenderTeamNumber(void)
121	C_BaseEntity::InSameTeam(C_BaseEntity*)
122	C_BaseEntity::InLocalTeam(void)
123	C_BaseEntity::IsValidIDTarget(void)
124	C_BaseEntity::GetIDString(void)
125	C_BaseEntity::ModifyEmitSoundParams(EmitSound_t &)
126	C_BaseEntity::InitializeAsClientEntity(char const*,RenderGroup_t)
127	C_BaseAnimating::Simulate(void)
128	C_BaseCombatWeapon::OnDataChanged(DataUpdateType_t)
129	C_BaseAnimating::OnPreDataChanged(DataUpdateType_t)
130	C_BaseEntity::GetClientVehicle(void)
131	C_BaseAnimating::GetAimEntOrigin(IClientEntity *,Vector *,QAngle *)
132	C_BaseEntity::GetOldOrigin(void)
133	C_BaseAnimating::GetRenderGroup(void)
134	C_BaseCombatWeapon::GetToolRecordingState(KeyValues *)
135	C_BaseAnimating::CleanupToolRecordingState(KeyValues *)
136	C_BaseAnimating::GetCollideType(void)
137	C_BaseCombatWeapon::ShouldDraw(void)
138	C_BaseAnimating::IsSelfAnimating(void)
139	C_BaseEntity::OnLatchInterpolatedVariables(int)
140	C_BaseAnimating::OnNewModel(void)
141	C_BaseEntity::OnNewParticleEffect(char const*,CNewParticleEffect *)
142	C_BaseAnimating::ResetLatched(void)
143	C_BaseAnimating::Interpolate(float)
144	C_BaseEntity::IsSubModel(void)
145	C_BaseEntity::CreateLightEffects(void)
146	C_BaseAnimating::Clear(void)
147	C_BaseEntity::DrawBrushModel(bool,int,bool)
148	C_BaseEntity::GetTextureAnimationStartTime(void)
149	C_BaseEntity::TextureAnimationWrapped(void)
150	C_BaseEntity::SetNextClientThink(float)
151	C_BaseEntity::SetHealth(int)
152	C_BaseEntity::GetHealth(void)const
153	C_BaseEntity::GetMaxHealth(void)const
154	C_BaseCombatWeapon::ShadowCastType(void)
155	C_BaseEntity::ShouldReceiveProjectedTextures(int)
156	C_BaseEntity::IsShadowDirty(void)
157	C_BaseEntity::MarkShadowDirty(bool)
158	C_BaseEntity::GetShadowParent(void)
159	C_BaseEntity::FirstShadowChild(void)
160	C_BaseEntity::NextShadowPeer(void)
161	C_BaseEntity::AddDecal(Vector const&,Vector const&,Vector const&,int,int,bool,CGameTrace &,int)
162	C_BaseEntity::IsClientCreated(void)const
163	C_BaseAnimating::UpdateOnRemove(void)
164	C_BaseEntity::SUB_Remove(void)
165	C_BaseAnimating::SetPredictable(bool)
166	C_BaseAnimating::RestoreData(char const*,int,int)
167	C_BaseEntity::DamageDecal(int,int)
168	C_BaseEntity::DecalTrace(CGameTrace *,char const*)
169	C_BaseEntity::ImpactTrace(CGameTrace *,int,char const*)
170	C_BaseEntity::ShouldPredict(void)
171	C_BaseEntity::Think(void)
172	C_BaseEntity::CanBePoweredUp(void)
173	C_BaseEntity::AttemptToPowerup(int,float,float,C_BaseEntity*,CDamageModifier *)
174	C_BaseEntity::IsCurrentlyTouching(void)const
175	C_BaseEntity::StartTouch(C_BaseEntity*)
176	C_BaseEntity::Touch(C_BaseEntity*)
177	C_BaseEntity::EndTouch(C_BaseEntity*)
178	C_BaseEntity::PhysicsSolidMaskForEntity(void)const
179	C_BaseEntity::PhysicsSimulate(void)
180	C_BaseEntity::IsAlive(void)
181	C_BaseEntity::IsPlayer(void)const
182	C_BaseEntity::IsBaseCombatCharacter(void)
183	C_BaseEntity::MyCombatCharacterPointer(void)
184	C_BaseEntity::IsNPC(void)
185	C_BaseEntity::IsNextBot(void)
186	C_BaseEntity::IsBaseObject(void)const
187	C_BaseCombatWeapon::IsBaseCombatWeapon(void)const
188	C_BaseCombatWeapon::MyCombatWeaponPointer(void)
189	C_BaseEntity::IsBaseTrain(void)const
190	C_BaseEntity::EyePosition(void)
191	C_BaseEntity::EyeAngles(void)
192	C_BaseEntity::LocalEyeAngles(void)
193	C_BaseEntity::EarPosition(void)
194	C_BaseEntity::ShouldCollide(int,int)const
195	C_BaseEntity::GetViewOffset(void)const
196	C_BaseEntity::SetViewOffset(Vector const&)
197	C_BaseAnimating::GetBody(void)
198	C_BaseAnimating::GetSkin(void)
199	C_BaseEntity::GetModelInstance(void)
200	C_BaseEntity::GetShadowHandle(void)const
201	C_BaseEntity::RenderHandle(void)
202	C_BaseEntity::CreateModelInstance(void)
203	C_BaseEntity::ShouldInterpolate(void)
204	C_BaseAnimating::GetClientSideFade(void)
205	C_BaseCombatWeapon::BoneMergeFastCullBloat(Vector &,Vector &,Vector const&,Vector const&)const
206	C_BaseEntity::OnPredictedEntityRemove(bool,C_BaseEntity*)
207	C_BaseEntity::GetShadowCastDistance(float *,ShadowType_t)const
208	C_BaseEntity::GetShadowCastDirection(Vector *,ShadowType_t)const
209	C_BaseEntity::GetShadowUseOtherEntity(void)const
210	C_BaseEntity::SetShadowUseOtherEntity(C_BaseEntity*)
211	C_BaseEntity::AddRagdollToFadeQueue(void)
212	C_BaseEntity::IsDeflectable(void)
213	C_BaseAnimating::GetStudioBody(void)
214	C_BaseEntity::PerformCustomPhysics(Vector *,Vector *,QAngle *,QAngle *)
215	C_BaseEntity::GetRenderClipPlane(void)
216	C_BaseEntity::OnOwnerChanged(void)
217	C_BaseEntity::VPhysicsGetElement(int)
218	C_BaseEntity::IsARagdoll(void)
219	C_BaseEntity::SetMaterialOverride(char const*)
220	C_BaseEntity::SetMaterialOverridePointer(IMaterial *)
221	C_BaseEntity::GetMaterialOverridePointer(void)
222	C_BaseEntity::GetMaterialOverride(void)
223	C_BaseEntity::StartMaterialOverride(bool)
224	C_BaseEntity::EndMaterialOverride(bool)
225	C_BaseEntity::GetCreationTime(void)
226	C_BaseCombatWeapon::IsPredicted(void)const
227	C_BaseCombatWeapon::IsWeapon(void)const
228	C_BaseEntity::IsVehicle(void)const
229	C_BaseEntity::IsJeep(void)const
230	C_BaseEntity::UsesLua(void)
231	C_BaseEntity::GetLuaEntityType(void)
232	C_BaseEntity::PushEntity(void)
233	C_BaseEntity::SetEntity(char const*,C_BaseEntity*)
234	C_BaseEntity::GetParentPhysicsNum(void)
235	C_BaseEntity::SetParentPhysicsNum(int)
236	C_BaseEntity::StartMotionController(void)
237	C_BaseEntity::StopMotionController(void)
238	C_BaseEntity::AttachObjectToMotionController(IPhysicsObject *)
239	C_BaseEntity::DetachObjectFromMotionController(IPhysicsObject *)
240	C_BaseEntity::GetCustomisedRenderBounds(Vector &,Vector &)
241	C_BaseEntity::SetCustomisedRenderBounds(Vector *,Vector *)
242	C_BaseEntity::GetLuaScriptName(void)
243	C_BaseEntity::SpawnedViaLua(void)
244	C_BaseEntity::OverridePosition(void)
245	C_BaseEntity::InitializeScriptedEntity(char const*)
246	C_BaseEntity::ClearLuaData(void)
247	C_BaseEntity::GetLuaTable(void)
248	C_BaseEntity::GetLuaEntity(void)
249	C_BaseEntity::SetLuaTable(ILuaObject *)
250	C_BaseEntity::Lua_OnEntityInitialized(void)
251	C_BaseEntity::HasLuaTable(void)
252	C_BaseEntity::LuaEntityInitialized(void)
253	C_BaseEntity::ForcePhysicsDropObject(void)
254	C_BaseEntity::StartDriving(C_BasePlayer *)
255	C_BaseEntity::FinishDriving(C_BasePlayer *)
256	C_BaseEntity::GMod_ShouldRenderEntity(void)
257	C_BaseEntity::OnClientsideLuaRestored(void)
258	C_BaseCombatWeapon::Lua_GetLuaClass(void)
259	C_BaseEntity::VPhysicsCollision(int,gamevcollisionevent_t *)
260	C_BaseEntity::GetNextBot(void)
261	C_BaseEntity::ComputeFxBlendForView(int)
262	C_BaseAnimating::GetBoneControllers(float *)
263	C_BaseAnimating::SetBoneController(int,float)
264	C_BaseAnimating::GetBoneController(int)
265	C_BaseAnimating::GetPoseParameters(CStudioHdr *,float *)
266	C_BaseAnimating::BuildTransformations(CStudioHdr *,Vector *,Quaternion *,matrix3x4_t const&,int,CBoneBitList &,Vector const*)
267	C_BaseAnimating::ApplyBoneMatrixTransform(matrix3x4_t &)
268	C_BaseAnimating::UpdateIKLocks(float)
269	C_BaseAnimating::CalculateIKLocks(float)
270	C_BaseAnimating::InternalDrawModel(int)
271	C_BaseAnimating::OnInternalDrawModel(ClientModelRenderInfo_t *)
272	C_BaseAnimating::OnPostInternalDrawModel(ClientModelRenderInfo_t *)
273	C_BaseAnimating::ControlMouth(CStudioHdr *)
274	C_BaseCombatWeapon::DoAnimationEvents(CStudioHdr *)
275	C_BaseAnimating::FireEvent(Vector const&,QAngle const&,int,char const*)
276	C_BaseAnimating::FireObsoleteEvent(Vector const&,QAngle const&,int,char const*)
277	C_BaseAnimating::ModifyEventParticles(char const*)
278	C_BaseAnimating::ResetEventsParity(void)
279	C_BaseAnimating::DispatchMuzzleEffect(char const*,bool)
280	C_BaseAnimating::StandardBlendingRules(CStudioHdr *,Vector *,Quaternion *,float,int)
281	C_BaseAnimating::AccumulateLayers(IBoneSetup &,Vector *,Quaternion *,float)
282	C_BaseAnimating::ChildLayerBlend(Vector *,Quaternion *,float,int)
283	C_BaseAnimating::AttachEntityToBone(C_BaseAnimating*,int,Vector,QAngle)
284	C_BaseAnimating::NotifyBoneAttached(C_BaseAnimating*)
285	C_BaseAnimating::UpdateBoneAttachments(void)
286	C_BaseAnimating::IsRagdoll(void)const
287	C_BaseAnimating::BecomeRagdollOnClient(void)
288	C_BaseAnimating::SaveRagdollInfo(int,matrix3x4_t const&,CBoneAccessor &)
289	C_BaseAnimating::RetrieveRagdollInfo(Vector *,Quaternion *)
290	C_BaseAnimating::GetRagdollInitBoneArrays(matrix3x4_t *,matrix3x4_t *,matrix3x4_t *,float)
291	C_BaseAnimating::RefreshCollisionBounds(void)
292	C_BaseAnimating::SetSequence(int)
293	C_BaseAnimating::StudioFrameAdvance(void)
294	C_BaseAnimating::FrameAdvance(float)
295	C_BaseAnimating::GetSequenceCycleRate(CStudioHdr *,int)
296	C_BaseAnimating::UpdateClientSideAnimation(void)
297	C_BaseAnimating::ComputeClientSideAnimationFlags(void)
298	C_BaseAnimating::ResetClientsideFrame(void)
299	C_BaseAnimating::IsActivityFinished(void)
300	C_BaseAnimating::UncorrectViewModelAttachment(Vector &)
301	C_BaseAnimating::DoMuzzleFlash(void)
302	C_BaseAnimating::ProcessMuzzleFlashEvent(void)
303	C_BaseAnimating::SetServerIntendedCycle(float)
304	C_BaseAnimating::GetServerIntendedCycle(void)
305	C_BaseAnimating::ShouldResetSequenceOnNewModel(void)
306	C_BaseAnimating::IsViewModel(void)const
307	C_BaseAnimating::FormatViewModelAttachment(int,matrix3x4_t &)
308	C_BaseAnimating::IsMenuModel(void)const
309	C_BaseAnimating::CalcAttachments(void)
310	C_BaseAnimating::LastBoneChangedTime(void)
311	C_BaseAnimating::OnModelLoadComplete(model_t const*)
312	C_BaseAnimating::SetOverrideViewTarget(Vector)
313	C_BaseAnimating::GetNumPhysicsBones(void)
314	C_BaseAnimating::GetForcedLod(void)
315	C_BaseAnimating::SetForcedLod(int)
316	C_BaseAnimating::GetPhysBoneNumber(int)
317	C_BaseAnimating::GetBoneManipulator(bool)
318	C_BaseAnimating::GetFlexManipulator(bool)
319	C_BaseAnimating::UnqueueSetupBones(void)
320	C_BaseAnimating::StartMeshOverride(ClientModelRenderInfo_t *)
321	C_BaseAnimating::StopMeshOverride(void)
322	C_BaseCombatWeapon::GetSubType(void)
323	C_BaseCombatWeapon::SetSubType(int)
324	C_BaseCombatWeapon::Equip(C_BaseCombatCharacter *)
325	C_BaseCombatWeapon::Drop(Vector const&)
326	C_BaseCombatWeapon::UpdateClientData(C_BasePlayer *)
327	C_BaseCombatWeapon::IsAllowedToSwitch(void)
328	C_BaseCombatWeapon::CanBeSelected(void)
329	C_BaseCombatWeapon::VisibleInWeaponSelection(void)
330	C_BaseCombatWeapon::HasAmmo(void)
331	C_BaseCombatWeapon::SetPickupTouch(void)
332	C_BaseCombatWeapon::DefaultTouch(C_BaseEntity *)
333	C_BaseCombatWeapon::GiveTo(C_BaseEntity *)
334	C_BaseCombatWeapon::ShouldDisplayAltFireHUDHint(void)
335	C_BaseCombatWeapon::DisplayAltFireHudHint(void)
336	C_BaseCombatWeapon::RescindAltFireHudHint(void)
337	C_BaseCombatWeapon::ShouldDisplayReloadHUDHint(void)
338	C_BaseCombatWeapon::DisplayReloadHudHint(void)
339	C_BaseCombatWeapon::RescindReloadHudHint(void)
340	C_BaseCombatWeapon::SetViewModelIndex(int)
341	C_BaseCombatWeapon::SendWeaponAnim(int)
342	C_BaseCombatWeapon::SendViewModelAnim(int)
343	C_BaseCombatWeapon::SetViewModel(void)
344	C_BaseCombatWeapon::HasWeaponIdleTimeElapsed(void)
345	C_BaseCombatWeapon::SetWeaponIdleTime(float)
346	C_BaseCombatWeapon::GetWeaponIdleTime(void)
347	C_BaseCombatWeapon::HasAnyAmmo(void)
348	C_BaseCombatWeapon::HasPrimaryAmmo(void)
349	C_BaseCombatWeapon::HasSecondaryAmmo(void)
350	C_BaseCombatWeapon::CanHolster(void)
351	C_BaseCombatWeapon::DefaultDeploy(char *,char *,int,char *)
352	C_BaseCombatWeapon::CanDeploy(void)
353	C_BaseCombatWeapon::Deploy(void)
354	C_BaseCombatWeapon::Holster(C_BaseCombatWeapon*)
355	C_BaseCombatWeapon::GetLastWeapon(void)
356	C_BaseCombatWeapon::SetWeaponVisible(bool)
357	C_BaseCombatWeapon::IsWeaponVisible(void)
358	C_BaseCombatWeapon::ReloadOrSwitchWeapons(void)
359	C_BaseCombatWeapon::OnActiveStateChanged(int)
360	C_BaseCombatWeapon::HolsterOnDetach(void)
361	C_BaseCombatWeapon::IsHolstered(void)
362	C_BaseCombatWeapon::Detach(void)
363	C_BaseCombatWeapon::ItemPreFrame(void)
364	C_BaseCombatWeapon::ItemPostFrame(void)
365	C_BaseCombatWeapon::ItemBusyFrame(void)
366	C_BaseCombatWeapon::ItemHolsterFrame(void)
367	C_BaseCombatWeapon::WeaponIdle(void)
368	C_BaseCombatWeapon::HandleFireOnEmpty(void)
369	C_BaseCombatWeapon::CanPerformSecondaryAttack(void)const
370	C_BaseCombatWeapon::ShouldBlockPrimaryFire(void)
371	C_BaseCombatWeapon::CreateMove(float,CUserCmd *,QAngle const&)
372	C_BaseCombatWeapon::IsWeaponZoomed(void)
373	C_BaseCombatWeapon::CheckReload(void)
374	C_BaseCombatWeapon::FinishReload(void)
375	C_BaseCombatWeapon::AbortReload(void)
376	C_BaseCombatWeapon::Reload(void)
377	C_BaseCombatWeapon::AutoFiresFullClip(void)
378	C_BaseCombatWeapon::UpdateAutoFire(void)
379	C_BaseCombatWeapon::PrimaryAttack(void)
380	C_BaseCombatWeapon::SecondaryAttack(void)
381	C_BaseCombatWeapon::GetPrimaryAttackActivity(void)
382	C_BaseCombatWeapon::GetSecondaryAttackActivity(void)
383	C_BaseCombatWeapon::GetDrawActivity(void)
384	C_BaseCombatWeapon::GetDefaultAnimSpeed(void)
385	C_BaseCombatWeapon::GetBulletType(void)
386	C_BaseCombatWeapon::GetBulletSpread(void)
387	C_BaseCombatWeapon::GetBulletSpread(WeaponProficiency_t)
388	C_BaseCombatWeapon::GetSpreadBias(WeaponProficiency_t)
389	C_BaseCombatWeapon::GetFireRate(void)
390	C_BaseCombatWeapon::GetMinBurst(void)
391	C_BaseCombatWeapon::GetMaxBurst(void)
392	C_BaseCombatWeapon::GetMinRestTime(void)
393	C_BaseCombatWeapon::GetMaxRestTime(void)
394	C_BaseCombatWeapon::GetRandomBurst(void)
395	C_BaseCombatWeapon::WeaponSound(WeaponSound_t,float)
396	C_BaseCombatWeapon::StopWeaponSound(WeaponSound_t)
397	C_BaseCombatWeapon::GetProficiencyValues(void)
398	C_BaseCombatWeapon::GetMaxAutoAimDeflection(void)
399	C_BaseCombatWeapon::WeaponAutoAimScale(void)
400	C_BaseCombatWeapon::StartSprinting(void)
401	C_BaseCombatWeapon::StopSprinting(void)
402	C_BaseCombatWeapon::GetDamage(float,int)
403	C_BaseCombatWeapon::SetActivity(Activity,float)
404	C_BaseCombatWeapon::AddViewKick(void)
405	C_BaseCombatWeapon::GetDeathNoticeName(void)
406	C_BaseCombatWeapon::OnPickedUp(C_BaseCombatCharacter *)
407	C_BaseCombatWeapon::AddViewmodelBob(C_BaseViewModel *,Vector &,QAngle &)
408	C_BaseCombatWeapon::CalcViewmodelBob(void)
409	C_BaseCombatWeapon::GetControlPanelInfo(int,char const*&)
410	C_BaseCombatWeapon::GetControlPanelClassName(int,char const*&)
411	C_BaseCombatWeapon::ShouldShowControlPanels(void)
412	C_BaseCombatWeapon::CanBePickedUpByNPCs(void)
413	C_BaseCombatWeapon::GetSkinOverride(void)const
414	C_BaseCombatWeapon::GetViewModel(int)const
415	C_BaseCombatWeapon::GetWorldModel(void)const
416	C_BaseCombatWeapon::GetAnimPrefix(void)const
417	C_BaseCombatWeapon::GetMaxClip1(void)const
418	C_BaseCombatWeapon::GetMaxClip2(void)const
419	C_BaseCombatWeapon::GetDefaultClip1(void)const
420	C_BaseCombatWeapon::GetDefaultClip2(void)const
421	C_BaseCombatWeapon::GetWeight(void)const
422	C_BaseCombatWeapon::AllowsAutoSwitchTo(void)const
423	C_BaseCombatWeapon::AllowsAutoSwitchFrom(void)const
424	C_BaseCombatWeapon::ForceWeaponSwitch(void)const
425	C_BaseCombatWeapon::GetWeaponFlags(void)const
426	C_BaseCombatWeapon::GetSlot(void)
427	C_BaseCombatWeapon::GetPosition(void)
428	C_BaseCombatWeapon::GetName(void)const
429	C_BaseCombatWeapon::GetPrintName(void)const
430	C_BaseCombatWeapon::GetShootSound(int)const
431	C_BaseCombatWeapon::GetRumbleEffect(void)const
432	C_BaseCombatWeapon::UsesClipsForAmmo1(void)const
433	C_BaseCombatWeapon::UsesClipsForAmmo2(void)const
434	C_BaseCombatWeapon::GetHoldType(void)const
435	C_BaseCombatWeapon::SetHoldType(char const*)
436	C_BaseCombatWeapon::GetEncryptionKey(void)
437	C_BaseCombatWeapon::GetPrimaryAmmoType(void)const
438	C_BaseCombatWeapon::GetSecondaryAmmoType(void)const
439	C_BaseCombatWeapon::Clip1(void)
440	C_BaseCombatWeapon::Clip2(void)
441	C_BaseCombatWeapon::GetSpriteActive(void)const
442	C_BaseCombatWeapon::GetSpriteInactive(void)const
443	C_BaseCombatWeapon::GetSpriteAmmo(void)const
444	C_BaseCombatWeapon::GetSpriteAmmo2(void)const
445	C_BaseCombatWeapon::GetSpriteCrosshair(void)const
446	C_BaseCombatWeapon::GetSpriteAutoaim(void)const
447	C_BaseCombatWeapon::GetSpriteZoomedCrosshair(void)const
448	C_BaseCombatWeapon::GetSpriteZoomedAutoaim(void)const
449	C_BaseCombatWeapon::ActivityOverride(Activity,bool *)
450	C_BaseCombatWeapon::ActivityList(void)
451	C_BaseCombatWeapon::ActivityListCount(void)
452	C_BaseCombatWeapon::PoseParameterOverride(bool)
453	C_BaseCombatWeapon::PoseParamList(int &)
454	C_BaseCombatWeapon::ShouldUseLargeViewModelVROverride(void)
455	C_BaseCombatWeapon::OnFireEvent(C_BaseViewModel *,Vector const&,QAngle const&,int,char const*)
456	C_BaseCombatWeapon::RestartParticleEffect(void)
457	C_BaseCombatWeapon::Redraw(void)
458	C_BaseCombatWeapon::ViewModelDrawn(C_BaseViewModel *)
459	C_BaseCombatWeapon::RenderScreen(void)
460	C_BaseCombatWeapon::DrawCrosshair(void)
461	C_BaseCombatWeapon::ShouldDrawCrosshair(void)
462	C_BaseCombatWeapon::IsCarriedByLocalPlayer(void)
463	C_BaseCombatWeapon::ShouldDrawUsingViewModel(void)
464	C_BaseCombatWeapon::IsActiveByLocalPlayer(void)
465	C_BaseCombatWeapon::ShouldDrawPickup(void)
466	C_BaseCombatWeapon::HandleInput(void)
467	C_BaseCombatWeapon::OverrideMouseInput(float *,float *)
468	C_BaseCombatWeapon::KeyInput(int,ButtonCode_t,char const*)
469	C_BaseCombatWeapon::AddLookShift(void)
470	C_BaseCombatWeapon::GetViewmodelBoneControllers(C_BaseViewModel *,float *)
471	C_BaseCombatWeapon::GetWorldModelIndex(void)
472	C_BaseCombatWeapon::GetWeaponCrosshairScale(float &)
473	C_BaseCombatWeapon::ViewModel_IsTransparent(void)
474	C_BaseCombatWeapon::ViewModel_IsUsingFBTexture(void)
475	C_BaseCombatWeapon::IsOverridingViewmodel(void)
476	C_BaseCombatWeapon::DrawOverriddenViewmodel(C_BaseViewModel *,int)
477	C_BaseCombatWeapon::ThirdPersonSwitch(bool)
478	C_BaseCombatWeapon::CanLower(void)
479	C_BaseCombatWeapon::Ready(void)
480	C_BaseCombatWeapon::Lower(void)
481	C_BaseCombatWeapon::HideThink(void)
482	C_BaseCombatWeapon::CanReload(void)
483	C_BaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick(void)
484	C_BaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick(void *)
485	C_BaseCombatWeapon::GetPlayerDamage(void)
486	C_BaseCombatWeapon::EquipAmmo(C_BaseEntity *)
487	C_BaseCombatWeapon::ShouldDropOnDie(void)
488	C_BaseCombatWeapon::ShouldDrawViewModel(void)
489	C_BaseCombatWeapon::GetLastShootTime(void)
490	C_BaseCombatWeapon::UpdateLastShootTime(float)
491	C_BaseCombatWeapon::GetFOV(float)
492	C_BaseCombatWeapon::GetTracerOrigin(Vector &)
493	C_BaseCombatWeapon::OverrideMouseInput(void)
494	C_BaseCombatWeapon::DrawWeaponSelection(int,int,int,int,int)
495	C_BaseCombatWeapon::DrawHUD(void)
496	C_BaseCombatWeapon::DrawHUDBackground(void)
497	C_BaseCombatWeapon::ShouldDrawAmmo(void)
498	C_BaseCombatWeapon::GetViewModelFOV(float)
499	C_BaseCombatWeapon::GetSwayScale(void)
500	C_BaseCombatWeapon::GetWeaponBobScale(void)
501	C_BaseCombatWeapon::ShouldFlipViewModel(unsigned int,bool)
502	C_BaseCombatWeapon::ShouldDrawAccurateCrosshair(void)
503	C_BaseCombatWeapon::DrawCrosshair(float,float)
504	C_BaseCombatWeapon::GModNPCAttackHack(void)
505	C_BaseCombatWeapon::WasDropped(void)
506	C_BaseCombatWeapon::MarkAsDropped(void)
